import os
import streamlit as st
from PyPDF2 import PdfReader
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain.tools import Tool
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.schema import HumanMessage, AIMessage
from tavily import TavilyClient
import json

# Configuraci칩n de APIs usando variables de entorno
def get_api_keys():
    """Obtiene las claves API desde las variables de entorno"""
    try:
        # Intentar primero desde variables de entorno (Replit Secrets)
        openai_key = os.getenv("OPENAI_API_KEY")
        tavily_key = os.getenv("TAVILY_API_KEY")
        
        # Si no est치n en variables de entorno, intentar desde Streamlit secrets
        if not openai_key or not tavily_key:
            try:
                openai_key = openai_key or st.secrets["OPENAI_API_KEY"]
                tavily_key = tavily_key or st.secrets["TAVILY_API_KEY"]
            except:
                pass
        
        if not openai_key or not tavily_key:
            st.error("Error: Claves API no encontradas")
            st.error("Por favor, configura las claves OPENAI_API_KEY y TAVILY_API_KEY en los secrets de Replit")
            raise ValueError("Claves API no encontradas")
            
        return openai_key, tavily_key
    except Exception as e:
        st.error(f"Error al obtener las claves API: {str(e)}")
        raise

def extraer_texto_de_pdf(fichero_subido):
    """
    Extrae el texto completo de un archivo PDF subido
    
    Args:
        fichero_subido: Objeto de archivo de Streamlit
        
    Returns:
        str: Texto extra칤do del PDF
    """
    try:
        # Crear lector PDF
        pdf_reader = PdfReader(fichero_subido)
        
        # Extraer texto de todas las p치ginas
        texto_completo = ""
        for pagina in pdf_reader.pages:
            texto_completo += pagina.extract_text() + "\n"
        
        # Verificar que se extrajo texto
        if not texto_completo.strip():
            raise ValueError("No se pudo extraer texto del PDF. El archivo podr칤a contener solo im치genes o estar corrupto.")
            
        return texto_completo.strip()
        
    except Exception as e:
        raise Exception(f"Error al extraer texto del PDF: {str(e)}")

def crear_herramienta_busqueda(tavily_key):
    """Crea la herramienta de b칰squeda web usando Tavily"""
    
    def buscar_web(query):
        """Realiza b칰squeda web usando Tavily"""
        try:
            client = TavilyClient(api_key=tavily_key)
            response = client.search(
                query=query,
                search_depth="advanced",
                max_results=5,
                include_domains=["scholar.google.com", "arxiv.org", "ieee.org", "nature.com", "science.org"]
            )
            
            # Formatear resultados
            resultados = []
            for result in response.get('results', []):
                resultados.append({
                    'title': result.get('title', ''),
                    'url': result.get('url', ''),
                    'content': result.get('content', '')[:500] + '...' if len(result.get('content', '')) > 500 else result.get('content', '')
                })
            
            return json.dumps(resultados, indent=2)
            
        except Exception as e:
            return f"Error en la b칰squeda: {str(e)}"
    
    return Tool(
        name="busqueda_web",
        description="Busca informaci칩n actual en internet sobre tecnolog칤as, mercados, competidores y tendencias",
        func=buscar_web
    )

def generar_informe_completo(texto_paper):
    """
    Genera el informe completo de an치lisis de transferencia tecnol칩gica
    
    Args:
        texto_paper (str): Texto extra칤do del paper cient칤fico
        
    Returns:
        str: Informe completo en formato Markdown
    """
    try:
        # Obtener claves API
        openai_key, tavily_key = get_api_keys()
        
        # Inicializar LLM
        # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
        # do not change this unless explicitly requested by the user
        llm = ChatOpenAI(
            model="gpt-4o",
            api_key=openai_key,
            temperature=0.3
        )
        
        # PASO 1: An치lisis interno del paper
        st.write("游댌 Paso 1/4: Analizando el contenido del paper...")
        
        prompt_analisis = f"""
        Eres un experto en an치lisis de investigaci칩n cient칤fica. Analiza el siguiente paper y extrae:
        
        1. La tecnolog칤a o soluci칩n principal
        2. El problema espec칤fico que aborda
        3. La metodolog칤a utilizada
        4. El potencial innovador y disruptivo
        5. Palabras clave t칠cnicas relevantes
        
        Paper a analizar:
        {texto_paper}
        
        Proporciona un an치lisis estructurado y conciso.
        """
        
        response_analisis = llm.invoke([HumanMessage(content=prompt_analisis)])
        analisis_interno = response_analisis.content
        
        # PASO 2: B칰squeda de tendencias y tecnolog칤as relacionadas
        st.write("游깷 Paso 2/4: Investigando tendencias de mercado...")
        
        # Crear herramienta de b칰squeda
        herramienta_busqueda = crear_herramienta_busqueda(tavily_key)
        
        # Crear agente para b칰squeda de tendencias
        prompt_tendencias = ChatPromptTemplate.from_messages([
            ("system", """Eres un analista de mercado especializado en tecnolog칤a. 
            Bas치ndote en el an치lisis del paper, genera 2-3 consultas de b칰squeda espec칤ficas para encontrar:
            1. Tendencias actuales del mercado relacionadas con la tecnolog칤a
            2. Tecnolog칤as emergentes en el mismo campo
            3. Aplicaciones comerciales actuales
            
            Usa la herramienta de b칰squeda web para investigar y proporciona un resumen consolidado."""),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
            ("human", "An치lisis del paper: {analisis}\n\nRealiza b칰squedas para encontrar tendencias de mercado relevantes.")
        ])
        
        agente_tendencias = create_openai_functions_agent(
            llm=llm,
            tools=[herramienta_busqueda],
            prompt=prompt_tendencias
        )
        
        executor_tendencias = AgentExecutor(
            agent=agente_tendencias,
            tools=[herramienta_busqueda],
            verbose=False
        )
        
        resultado_tendencias = executor_tendencias.invoke({
            "analisis": analisis_interno
        })
        
        # PASO 3: B칰squeda de panorama competitivo
        st.write("游끽 Paso 3/4: Analizando el panorama competitivo...")
        
        prompt_competitivo = ChatPromptTemplate.from_messages([
            ("system", """Eres un analista de inteligencia competitiva. 
            Bas치ndote en el an치lisis del paper, genera 2-3 consultas de b칰squeda para encontrar:
            1. Empresas y startups que trabajen en tecnolog칤as similares
            2. Centros de investigaci칩n y universidades en el mismo campo
            3. Posibles socios estrat칠gicos o competidores directos
            
            Usa la herramienta de b칰squeda web y proporciona un an치lisis estructurado."""),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
            ("human", "An치lisis del paper: {analisis}\n\nBusca informaci칩n sobre el panorama competitivo.")
        ])
        
        agente_competitivo = create_openai_functions_agent(
            llm=llm,
            tools=[herramienta_busqueda],
            prompt=prompt_competitivo
        )
        
        executor_competitivo = AgentExecutor(
            agent=agente_competitivo,
            tools=[herramienta_busqueda],
            verbose=False
        )
        
        resultado_competitivo = executor_competitivo.invoke({
            "analisis": analisis_interno
        })
        
        # PASO 4: S칤ntesis y recomendaciones de TRL
        st.write("游늵 Paso 4/4: Generando recomendaciones de TRL...")
        
        prompt_final = f"""
        Eres un consultor experto en transferencia tecnol칩gica. Bas치ndote en toda la informaci칩n recopilada, 
        genera un informe completo siguiendo EXACTAMENTE esta estructura Markdown:

        # Informe de Potencial de Transferencia Tecnol칩gica

        ## 1. An치lisis del Proyecto de Investigaci칩n

        **Tecnolog칤a/Soluci칩n Principal:**
        * [Resumen de la tecnolog칤a clave identificada en el paper]

        **Problema Abordado:**
        * [Descripci칩n del problema que la investigaci칩n busca resolver]

        **Potencial Innovador Intr칤nseco:**
        * [An치lisis sobre la novedad y el car치cter disruptivo de la propuesta]

        ---

        ## 2. Contexto de Mercado y Tendencias Actuales

        **Tendencias de Mercado Relevantes:**
        * [Lista de tendencias de mercado identificadas]

        **Tecnolog칤as Relacionadas y Emergentes:**
        * [Lista de otras tecnolog칤as complementarias o en evoluci칩n]

        ---

        ## 3. Panorama Competitivo y Posibles Colaboradores

        **Actores Clave en el Mercado (Empresas/Startups):**
        * [Lista de posibles competidores con una breve descripci칩n]

        **Centros de Investigaci칩n y Posibles Socios Acad칠micos:**
        * [Lista de otras universidades o centros que investigan en la misma l칤nea]

        ---

        ## 4. Hoja de Ruta Sugerida para Aumentar el TRL

        **An치lisis de Madurez Actual (TRL Estimado):**
        * Basado en la descripci칩n, el nivel de madurez tecnol칩gica (TRL) actual se estima en **TRL [X]**.
        * Justificaci칩n: [Breve explicaci칩n sobre por qu칠 estimas ese TRL].

        **Siguientes Pasos Accionables:**
        1. **Para alcanzar TRL [X+1]:** [Sugerencia concreta]
        2. **Para alcanzar TRL [X+2]:** [Sugerencia concreta]
        3. **Preguntas Clave a Resolver:** [Lista de preguntas que el investigador deber칤a responder para avanzar]

        INFORMACI칍N PARA EL AN츼LISIS:

        Paper Original:
        {texto_paper}

        An치lisis Interno:
        {analisis_interno}

        Tendencias de Mercado:
        {resultado_tendencias['output']}

        Panorama Competitivo:
        {resultado_competitivo['output']}

        Genera el informe completo siguiendo exactamente la estructura indicada.
        """
        
        response_final = llm.invoke([HumanMessage(content=prompt_final)])
        informe_final = response_final.content
        
        return informe_final
        
    except Exception as e:
        raise Exception(f"Error al generar el informe: {str(e)}")
